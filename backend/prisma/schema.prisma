generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String    @id @default(cuid())
  username  String    @unique
  password  String
  name      String?
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relações
  profile   UserProfile?
  accounts  Account[]
  posts     Post[]
  sessions  Session[]
  savedUsers SavedUser[] @relation("UserSavedUsers", references: [id])
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id               String    @id @default(cuid())
  userId           String
  provider         String
  accessToken      String
  refreshToken     String?
  expiresAt        DateTime?
  tokenType        String?
  scope            String?
  idToken          String?
  sessionState     String?
  oauthTokenSecret String?
  oauthToken       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model SavedUser {
  id        String   @id @default(cuid())
  userId    String
  savedById String
  site      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  savedBy   User     @relation(fields: [savedById], references: [id], onDelete: Cascade, name: "UserSavedUsers")
}

